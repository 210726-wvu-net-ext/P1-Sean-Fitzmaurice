<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RestaurantReviews.DataAccess</name>
    </assembly>
    <members>
        <member name="T:RestaurantReviews.DataAccess.Repository">
            <summary>
            Repoistory class for making adding, removing and making changes to the information in the database
            </summary>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.#ctor(RestaurantReviews.DataAccess.Entities.RestaurantReviewContext)">
            <summary>
            constructor, connects to database using DB context generated by Microsoft Entity Framework
            </summary>
            <param name="context"> the DBContext object</param>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.SearchRestaurantsName(System.String)">
            <summary>
            searches restauraunts by the name column in DB
            </summary>
            <param name="name">search string</param>
            <returns>List of restaurants with matching string in their name</returns>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.SearchRestaurantsAddress(System.String)">
            <summary>
            searches restaurants by address column in DB
            </summary>
            <param name="address">search string</param>
            <returns>List of restaurants with matching string in their name</returns>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.SearchRestaurantsZip(System.Int32)">
            <summary>
            searches restaurants by zip column in DB
            </summary>
            <param name="zip">zip to search as an integer</param>
            <returns>list of restaurants with matching zip</returns>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.AddCustomer(RestaurantReviews.Domain.Customer)">
            <summary>
            adds new customer information to DB
            </summary>
            <param name="customer">a new customer object, without value for primary key ID</param>
            <returns>customer object</returns>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.AddRestaurant(RestaurantReviews.Domain.Restaurant)">
            <summary>
            adds a new restaurant's infromation to DB
            </summary>
            <param name="restaurant">new restaurant object, without value for primary key ID</param>
            <returns></returns>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.FindRatingsByRestaurantId(System.Int32)">
            <summary>
            Gets a restaurant reviews by its primary key ID orders reviews by date (most recent)
            </summary>
            <param name="Id">ID primary key of restauarant</param>
            <returns>list of reviews with foreign key matching restaurant primary key</returns>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.FindReviewsByCustomer(RestaurantReviews.Domain.Customer)">
            <summary>
            Finds reviews made by specific customer orders reviews by date (most recent)
            </summary>
            <param name="customer">customer to find reviews for</param>
            <returns>list of reviews made by customer</returns>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.SearchCustomers(System.String)">
            <summary>
            Search customers by name
            </summary>
            <param name="name">search string</param>
            <returns>list of customers with matching string in name, case sensitive</returns>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.GetCustomerById(System.Int32)">
            <summary>
            gets a customer by their primary key ID
            </summary>
            <param name="Id">Primary key ID for customer in DB</param>
            <returns>returns customer with matching ID, returns new customer object if none exists</returns>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.LeaveReview(RestaurantReviews.Domain.Review)">
            <summary>
            Puts review in DB
            </summary>
            <param name="review">review object to be placed in DB</param>
            <returns>review object</returns>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.DeleteUser(RestaurantReviews.Domain.Customer)">
            <summary>
            Deletes a customer and all their reviews from DB
            </summary>
            <param name="custDel">customer to be delete</param>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.DeleteReview(RestaurantReviews.Domain.Review)">
            <summary>
            Deletes a reviews from DB
            </summary>
            <param name="revDel">review to be deleted</param>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.DeleteRestaurant(RestaurantReviews.Domain.Restaurant)">
            <summary>
            deletes a restaurant and all its reviews from DB
            </summary>
            <param name="restDel">restaurant to be deleted</param>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.GetCustomer(System.String)">
            <summary>
            gets a customer by name
            </summary>
            <param name="name">name to search customer by</param>
            <returns>returns customer with name matching name string, returns new customer object if none is found</returns>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.GetReviewById(System.Int32)">
            <summary>
            gets a review by its primary key ID
            </summary>
            <param name="Id">Id of review</param>
            <returns>review with matching primary key, new review object if none exists</returns>
        </member>
        <member name="M:RestaurantReviews.DataAccess.Repository.GetRestaurantById(System.Int32,System.Boolean)">
            <summary>
            gets a restaurant by its primary key ID
            </summary>
            <param name="Id">Id of restaurant</param>
            <returns>restaurant with matching primary key, new restaurant object if none exists</returns>
        </member>
    </members>
</doc>
